import { GraphqlServerContext } from 'typeorm-graphql-middleware';
import { GraphQLResolveInfo } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
// export { };

//declare global {
declare namespace GQL2 {
	/*******************************
	 *                             *
	 *          TYPE DEFS          *
	 *                             *
	 *******************************/
	export interface Query {
		users?: (User | null)[];
	}

	export interface User {
		id: string;
		name: string;
		posts: (Post | null)[];
	}

	export interface Post {
		id: string;
		name: string;
		user: User;
	}

	export interface Mutation {
		addUser: User;
	}

	export interface AddUserInput {
		name: string;
		posts?: (string | null)[];
	}

	/*********************************
	 *                               *
	 *         TYPE RESOLVERS        *
	 *                               *
	 *********************************/
	/**
	 * This interface define the shape of your resolver
	 * Note that this type is designed to be compatible with graphql-tools resolvers
	 * However, you can still use other generated interfaces to make your resolver type-safed
	 */
	export interface Resolver {
		Query?: QueryTypeResolver;
		User?: UserTypeResolver;
		Post?: PostTypeResolver;
		Mutation?: MutationTypeResolver;
	}
	export interface QueryTypeResolver<TParent = any> {
		users?: QueryToUsersResolver<TParent>;
	}

	export interface QueryToUsersResolver<TParent = any, TResult = any> {
		(parent: TParent, args: {}, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}

	export interface UserTypeResolver<TParent = any> {
		id?: UserToIdResolver<TParent>;
		name?: UserToNameResolver<TParent>;
		posts?: UserToPostsResolver<TParent>;
	}

	export interface UserToIdResolver<TParent = any, TResult = any> {
		(parent: TParent, args: {}, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}

	export interface UserToNameResolver<TParent = any, TResult = any> {
		(parent: TParent, args: {}, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}

	export interface UserToPostsResolver<TParent = any, TResult = any> {
		(parent: TParent, args: {}, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}

	export interface PostTypeResolver<TParent = any> {
		id?: PostToIdResolver<TParent>;
		name?: PostToNameResolver<TParent>;
		user?: PostToUserResolver<TParent>;
	}

	export interface PostToIdResolver<TParent = any, TResult = any> {
		(parent: TParent, args: {}, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}

	export interface PostToNameResolver<TParent = any, TResult = any> {
		(parent: TParent, args: {}, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}

	export interface PostToUserResolver<TParent = any, TResult = any> {
		(parent: TParent, args: {}, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}

	export interface MutationTypeResolver<TParent = any> {
		addUser?: MutationToAddUserResolver<TParent>;
	}

	export interface MutationToAddUserArgs {
		input?: AddUserInput;
	}
	export interface MutationToAddUserResolver<TParent = any, TResult = any> {
		(parent: TParent, args: MutationToAddUserArgs, context: GraphqlServerContext, info: GraphQLResolveInfo): TResult;
	}
}
//}
